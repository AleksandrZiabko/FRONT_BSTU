import React, {Component} from  'react';
import {connect} from 'react-redux';
import {authForm} from 'actions/authForm';
import {authForm as authFormSelector} from 'selectors';

import 'grommet-css';
import Form from 'components/authForm';
import Toast from 'grommet/components/Toast';

class AuthForm extends Component {

    constructor() {
        super();
        this.state = {
            isAuth: null
        }
    }

    componentWillReceiveProps(nextProps) {
        if(nextProps.auth.status) {
            this.setState({isAuth: true})
            this.createCookie({
                token: nextProps.auth.data.token,
                login: nextProps.auth.data.userData.login,
                admin: nextProps.auth.data.userData.admin,
                fname: nextProps.auth.data.userData.fname,
                sname: nextProps.auth.data.userData.sname,
                year: nextProps.auth.data.userData.year,
                groupe: nextProps.auth.data.userData.groupe,
                podgroupe: nextProps.auth.data.userData.podgroupe,
            })
        } else {
            this.setState({isAuth: false})
        }
    }

    createCookie(obj) {
        for (let index in obj) {
            this.setCookie(index, obj[index], {
                expires: 86400,
                path: '/'
            })
        }
        window.location.href = "/";
    }

    sendData(obj)
    {
        this.props.authForm(obj, '/auth');
    }

    setCookie(name, value, options) {
        options = options || {};

        let expires = options.expires;

        if (typeof expires === "number" && expires) {
            let d = new Date();
            d.setTime(d.getTime() + expires * 1000);
            expires = options.expires = d;
        }
        if (expires && expires.toUTCString) {
            options.expires = expires.toUTCString();
        }

        value = encodeURIComponent(value);

        let updatedCookie = name + "=" + value;

        for (let propName in options) {
            updatedCookie += "; " + propName;
            let propValue = options[propName];
            if (propValue !== true) {
                updatedCookie += "=" + propValue;
            }
        }

        document.cookie = updatedCookie;
    }

    render () {
        return (
            <div>
                { this.state.isAuth === false && <Toast onClose={() => this.setState({ isAuth: null}) } status='critical'>
                    Неправильный логин или пароль! </Toast>}
                <Form props = {this.props} uploadForm = {this.sendData}/>
            </div>
        )
    };
}

const mapDispatchToProps = {
    authForm,
};

const mapStateToProps = state => ({
    auth: authFormSelector(state),
});

export default connect(mapStateToProps, mapDispatchToProps)(AuthForm)